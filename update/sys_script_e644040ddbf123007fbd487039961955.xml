<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Instantiate the NeedItUtils class. Call the isDatePast method and pass the u_when_needed value
	var niutils = new NeedItUtils();
	var isPast = niutils.isDatePast(current.u_when_needed);
	var isToday = niutils.isDateToday(current.u_when_needed);
	
	// If the isDatePast method returns true, the date is in the past.
	if(isPast == true) {
		gs.addErrorMessage("When needed date cannot be in the past. Your request has not been saved to the database.");
		current.setAbortAction(true);
	}
	// If the isDateToday method returns true, the date is today.
	if(isToday == true) {
		gs.addErrorMessage("'When needed' date cannot be today. Your request has not been saved to the database.");
		current.setAbortAction(true);
	}
	
	
// 	// rightnow stores the current time
// 	var rightnow = new GlideDateTime();
// 	var earliest = rightnow.addDaysUTC(1);
// 	// Create a GlideDateTime object for the When needed date
// 	var whenNeeded = new GlideDateTime(current.u_when_needed);
	
	
// 	// establish the earliest possible date for 'When needed'
// 	//var earliest = new GlideDateTime();
//     //earliest.addDaysUTC(1);
	
// 	// If the When needed date is in the past, do not write the record to the database
// 	// Output an error message to the screen
// 	if(whenNeeded.before(rightnow)) {
// 		gs.addErrorMessage("'When needed' cannot be in the past. Your request has not been saved to the database.");
// 		gs.addErrorMessage('whenNeeded value is: '+ whenNeeded.getDisplayValue());
//         gs.addErrorMessage('earliest value is: ' + earliest.getDisplayValue());
//         gs.addErrorMessage('rightnow value is: ' + rightnow.getDisplayValue());
// 		current.setAbortAction(true);
// 	}
// 	// If the When needed date is less than 1 day from rightnow, do not write the record to the database
// 	// Output an error message to the screen
// 	if(whenNeeded.compareTo(earliest)==-1) {
// 		gs.addErrorMessage("The 'When needed' date needs to be at least one day from now.");
// 		current.setAbortAction(true);
// 	}

})(current, previous);


//(function executeRule(current, previous /*null when async*/) {
	/*
    // Create a GlideDateTime object for the When needed date
    var whenNeeded = new GlideDateTime(current.u_when_needed);
    
    //create a day of GlideDateTime
    var earliest = new GlideDateTime();
    earliest.addDaysUTC(1);
    
    // Alexey: var today is just for testing purposes (to compare output of different commands)
    var today = new GlideDateTime();
    // If the 'When needed' date is less than 1 day from rightnow, do not write the record to the database
    // Output an error message to the screen
    
    if(whenNeeded.compareTo(earliest)==-1) {
        gs.addErrorMessage("The 'When needed' date needs to be at least one day from now. Please adjust it to at least " + earliest.getDisplayValue() + ". Your request has not been saved to the database.");
        gs.addErrorMessage('whenNeeded: '+ whenNeeded.getDisplayValue());
        gs.addErrorMessage('earliest: ' + earliest.getDisplayValue());
        gs.addErrorMessage('GlideDateTime(): ' + today.getDisplayValue());
        current.setAbortAction(true);
    }
})(current, previous);
*/
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-13 21:20:11</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e644040ddbf123007fbd487039961955</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_e644040ddbf123007fbd487039961955</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-29 21:22:53</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e644040ddbf123007fbd487039961955"/>
</record_update>
